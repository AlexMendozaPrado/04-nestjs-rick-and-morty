import axios from 'axios'
import {SubmitHandler, set} from 'react-hook-form'
import { use, useEffect,useState } from 'react'
import {toast} from 'react-toastify'
import {useForm} from 'react-hook-form'
import { IoSearch, IoCloseSharp } from 'react-icons/io5'

import Head from 'next/head'
// componentes
import { PersonajeCard} from './app/components/personajesChard'
import { RickAndMortyCharactersInfo,restApiResponseData } from './app/types-ts/rick-and-morty-characters-info'

interface PropsApi {
    response: restApiResponseData;
}

interface InfoActual{
count:number;
pages:number;
next:string|null;
prev:string|null;
current:string;
}

interface infoBusqueda{
    consulta:string;
}

export const API_URL = 'https://rickandmortyapi.com/api/character';

export default function Home(props:PropsApi) {
    const {info,results=[]} = props.response;

    //Hooks de estado
    const {
        register,
        reset,
        handleSubmit,
        setValue,
        formState:{errors},
    }=useForm<infoBusqueda>();

    const[personajes,setPersonajes]=useState<RickAndMortyCharactersInfo[]>(results);
    const[infoActual,setInfoActual]=useState<InfoActual>({
        ...info,
        current:API_URL});

    
    //definicion de constantes
    const {current} = infoActual;
    const deshabilitarAnterior=infoActual.prev===null;
    const deshabilitarSiguiente=infoActual.next===null;
    const numeroPaginaActual=infoActual.current.includes('page=')
    ? Number(new URL(current).searchParams.get('page'))
    : 1;

    //funciones
    const manejarSiguientepagina=()=>{
        setInfoActual((infoPrevia:InfoActual)=>{
            return{...infoPrevia,current:infoPrevia.next? infoPrevia.next: current}
    })
    }
    const manejarAnteriorpagina=()=>{
        setInfoActual((infoPrevia:InfoActual)=>{
            return{...infoPrevia,current:infoPrevia.prev? infoPrevia.prev: current}
    })
    }

    
    useEffect(()=>{//cambio de pagina
        if(current===API_URL) return;

        async function cambioPagina(){//cambio de pagina
            const response=await axios.get<restApiResponseData>(current).then(({data})=>{
                return data})
                .catch(()=>{
                    toast.error('Error al obtener los datos')
                    return null;
                });
                if(response){
                    setInfoActual({
                        ...response.info,
                        current,
                    });
                    setPersonajes([...response.results]);
                }
        }
        cambioPagina()
    },[current]);

    return(
        <>
        <Head>
            <title>Rick y Morty</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
            <form>
                <div>
                    <input 
                    type='text'
                    {...register('consulta',{required:true})}
                    placeholder="Buscar personaje por nombre"
                    />
                    {errors.consulta && <span>Este campo es requerido</span>}

                </div>
                <button type='submit'>
                    <IoSearch/>
                </button>
            </form>
            <div>
                {personajes.map((personaje)=>(
                    <PersonajeCard key={personaje.id} personaje={personaje}/>
                ))}

            </div>
            
            <div>
            <button onClick={manejarAnteriorpagina} disabled={deshabilitarAnterior}>
                Previo
                
            </button>
            <input
            type="text"
            disabled
            value={`${numeroPaginaActual}/${infoActual.pages}`}
            />
                
            <button onClick={manejarSiguientepagina} disabled={deshabilitarSiguiente}>
                Siguiente
            </button>

            </div>


        </main>
        </>
    )

}




export async function getStaticProps() {
    // Obtener los datos de la API
    const response = await axios.get<restApiResponseData>(API_URL).then(({data}) => {
        return data });
    // Retornar los datos como props
    return {
        props: {
            response,
    }
}

}




